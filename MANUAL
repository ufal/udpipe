UDPipe
Version 1.0.0

Introduction
============

UDPipe is an trainable pipeline for tokenization, tagging, lemmatization and
dependency parsing of CoNLL-U files. UDPipe is language-agnostic and can be
trained given only annotated data in CoNLL-U format. Trained models are provided
for nearly all UD treebanks. UDPipe is available as a binary, as a library for
C++, Python, Perl, Java, C#, and as a web service.

UDPipe is a free software under Mozilla Public License 2.0
(http://www.mozilla.org/MPL/2.0/) and the linguistic models are free for
non-commercial use and distributed under CC BY-NC-SA
(http://creativecommons.org/licenses/by-nc-sa/4.0/) license, although for some
models the original data used to create the model may impose additional
licensing conditions. UDPipe is versioned using Semantic Versioning
(http://semver.org/).

Copyright 2016 by Institute of Formal and Applied Linguistics, Faculty of
Mathematics and Physics, Charles University in Prague, Czech Republic.


Online
======


Online Demo
-----------

Online demo (http://lindat.mff.cuni.cz/services/udpipe/) is available as one of
LINDAT/CLARIN services (http://lindat.mff.cuni.cz/services/).


Web Service
-----------

Web service (http://lindat.mff.cuni.cz/services/udpipe/api-reference.php) is
also available as one of LINDAT/CLARIN services
(http://lindat.mff.cuni.cz/services/).


Release
=======


Download
--------

UDPipe releases are available on GitHub (http://github.com/ufal/udpipe), either
as a pre-compiled binary package, or source code only. The binary package
contains Linux, Windows and OS X binaries, Java bindings binary, C# bindings
binary, and source code of UDPipe and all language bindings). While the binary
packages do not contain compiled Python or Perl bindings, packages for those
languages are available in standard package repositories, i.e. on PyPI and CPAN.

- Latest release (http://github.com/ufal/udpipe/releases/latest)
- All releases (http://github.com/ufal/udpipe/releases), Changelog
  (https://github.com/ufal/udpipe/blob/master/CHANGES)


Language Models
---------------

To use UDpipe, a language model is needed. The language models are available
from LINDAT/CLARIN (http://www.lindat.cz) infrastructure and described further
in the UDPipe User's Manual. Currently the following language models are
available:

- Universal Dependencies 1.2 Models: udpipe-ud1.2-160523
  (http://hdl.handle.net/11234/1-1659) (documentation
  (http://ufal.mff.cuni.cz/udpipe/users-manual#universal_dependencies_12_models))



License
-------

UDPipe is an open-source project and is freely available for non-commercial
purposes. The library is distributed under Mozilla Public License 2.0
(http://www.mozilla.org/MPL/2.0/) and the associated models and data under CC
BY-NC-SA (http://creativecommons.org/licenses/by-nc-sa/4.0/), although for some
models the original data used to create the model may impose additional
licensing conditions.

If you use this tool for scientific work, please give credit to us by
referencing Straka et al. 2016 and UDPipe website
(http://ufal.mff.cuni.cz/udpipe).


Platforms and Requirements
--------------------------

UDpipe is available as a standalone tool and as a library for Linux/Windows/OS
X. It does not require any additional libraries. As any supervised machine
learning tool, it needs trained linguistic models.


UDPipe Installation
===================

UDPipe releases are available on GitHub (http://github.com/ufal/udpipe), either
as a pre-compiled binary package, or source code only. The binary package
contains Linux, Windows and OS X binaries, Java bindings binary, C# bindings
binary, and source code of UDPipe and all language bindings. While the binary
packages do not contain compiled Python or Perl bindings, packages for those
languages are available in standard package repositories, i.e. on PyPI and CPAN.

To use UDPipe, a language model is needed. Here is a list of available language
models (http://ufal.mff.cuni.cz/udpipe#language_models).

If you want to compile UDPipe manually, sources are available on on GitHub
(http://github.com/ufal/udpipe), both in the pre-compiled binary package
releases (http://github.com/ufal/udpipe/releases) and in the repository itself.


Requirements
------------

- G++ 4.7 or newer, clang 3.2 or newer, Visual C++ 2015 or newer
- make
- SWIG 2.0.5 or newer for language bindings other than C++


Compilation
-----------

To compile UDPipe, run make in the src directory.

Make targets and options:
- exe: compile the binaries (default)
- server: compile the REST server
- lib: compile the static library
- BITS=32 or BITS=64: compile for specified 32-bit or 64-bit architecture
  instead of the default one
- MODE=release: create release build which statically links the C++ runtime and
  uses LTO
- MODE=debug: create debug build
- MODE=profile: create profile build


Platforms
---------

Platform can be selected using one of the following options:
- PLATFORM=linux, PLATFORM=linux-gcc: gcc compiler on Linux operating system,
  default on Linux
- PLATFORM=linux-clang: clang compiler on Linux, must be selected manually
- PLATFORM=osx, PLATFORM=osx-clang: clang compiler on OS X, default on OS X;
  BITS=32+64 enables multiarch build
- PLATFORM=win, PLATFORM=win-gcc: gcc compiler on Windows (TDM-GCC is well
  tested), default on Windows
- PLATFORM=win-vs: Visual C++ 2015 compiler on Windows, must be selected
  manually; note that the cl.exe compiler must be already present in PATH and
  corresponding BITS=32 or BITS=64 must be specified

Either POSIX shell or Windows CMD can be used as shell, it is detected
automatically.


Further Details
---------------

UDPipe uses C++ BuilTem system (http://github.com/ufal/cpp_builtem), please
refer to its manual if interested in all supported options.


Other language bindings
-----------------------


C#
--

Binary C# bindings are available in UDPipe binary packages.

To compile C# bindings manually, run make in the bindings/csharp directory,
optionally with the options described in UDPipe Installation.


Java
----

Binary Java bindings are available in UDPipe binary packages.

To compile Java bindings manually, run make in the bindings/java directory,
optionally with the options described in UDPipe Installation. Java 6 and newer
is supported.

The Java installation specified in the environment variable JAVA_HOME is used.
If the environment variable does not exist, the JAVA_HOME can be specified using
  make JAVA_HOME=path_to_Java_installation


Perl
----

The Perl bindings are available as Ufal-UDPipe package on CPAN.

To compile Perl bindings manually, run make in the bindings/perl directory,
optionally with the options described in UDPipe Installation. Perl 5.10 and
later is supported.

Path to the include headers of the required Perl version must be specified in
the PERL_INCLUDE variable using
  make PERL_INCLUDE=path_to_Perl_includes


Python
------

The Python bindings are available as ufal.udpipe package on PyPI.

To compile Python bindings manually, run make in the bindings/python directory,
optionally with options described in UDPipe Installation. Both Python 2.6+ and
Python 3+ are supported.

Path to the include headers of the required Python version must be specified in
the PYTHON_INCLUDE variable using
  make PYTHON_INCLUDE=path_to_Python_includes


UDPipe User's Manual
====================

Like any supervised machine learning tool, UDPipe needs a trained linguistic
model. This section describes the available language models and also the
commandline tools and interfaces.


Universal Dependencies 1.2 Models
---------------------------------

Universal Dependencies 1.2 Models are distributed under the CC BY-NC-SA
(http://creativecommons.org/licenses/by-nc-sa/4.0/) licence. The models are
based solely on Universal Dependencies 1.2 (http://hdl.handle.net/11234/1-1548)
treebanks. The models work in UDPipe version 1.0.

Universal Dependencies 1.2 Models are versioned according to the date released
in the format YYMMDD, where YY, MM and DD are two-digit representation of year,
month and day, respectively. The latest version is 160523.


Download
--------

The latest version 160523 of the Czech MorphoDiTa models can be downloaded from
LINDAT/CLARIN repository (http://hdl.handle.net/11234/1-1659).


Acknowledgements
----------------

This work has been partially supported and has been using language resources and
tools developed, stored and distributed by the LINDAT/CLARIN project of the
Ministry of Education, Youth and Sports of the Czech Republic (project
LM2015071).

The models were trained on Universal Dependencies 1.2
(http://hdl.handle.net/11234/1-1548) treebanks.

For the UD treebanks which do not contain original plain text version, raw text
is used to train the tokenizer instead. The plain texts were taken from the W2C
- Web to Corpus (http://hdl.handle.net/11858/00-097C-0000-0022-6133-9).


Publications
------------

- (Straka et al. 2016) Straka Milan, Hajič Jan, Straková Jana. UDPipe:
  Trainable Pipeline for Processing CoNLL-U Files Performing Tokenization,
  Morphological Analysis, POS Tagging and Parsing. LREC 2016, Portorož,
  Slovenia, May 2016.


Model Description
-----------------

The Universal Dependencies 1.2 models contain 36 models, each consisting of a
tokenizer, tagger, lemmatizer and dependency parser, all trained using the UD
data. The model for Japanese is missing, because we do not have the license for
the required corpus of Mainichi Shinbun 1995.

The tokenizer is trained using the SpaceAfter=No features. If the features are
not present in the data, they can be filled in using raw text in the language in
question (surprisingly, quite little data suffices, we use 500kB).

The tagger, lemmatizer and parser are trained using gold UD data.

Details about model architecture and training process can be found in the
(Straka et al. 2016) paper.


Model Performance
-----------------

We present the tagger, lemmatizer and parser performance, measured on the
testing portion of the data. Only the segmentation and the tokenization of the
testing data is retained before evaluation. Therefore, the dependency parser is
evaluated without gold POS tags.

  || Treebank             |  UPOS  |  XPOS  |  Feats | All Tags | Lemma  |  UAS   |  LAS   |
   | Ancient Greek        |  91.1% |  77.8% |  88.7% |    77.7% |  86.9% |  68.1% |  61.6% |
   | Ancient Greek-PROIEL |  96.7% |  96.4% |  89.3% |    88.4% |  93.4% |  75.8% |  69.6% |
   | Arabic               |  98.8% |  97.7% |  97.8% |    97.6% |    -   |  80.4% |  75.6% |
   | Basque               |  93.3% |    -   |  87.2% |    85.4% |  93.5% |  74.8% |  69.5% |
   | Bulgarian            |  97.8% |  94.8% |  94.4% |    93.1% |  94.6% |  89.0% |  84.2% |
   | Croatian             |  94.9% |    -   |  85.5% |    85.0% |  93.1% |  78.6% |  71.0% |
   | Czech                |  98.4% |  93.2% |  92.6% |    92.2% |  97.8% |  86.9% |  83.0% |
   | Danish               |  95.8% |    -   |  94.8% |    93.6% |  95.2% |  78.6% |  74.8% |
   | Dutch                |  89.7% |  88.7% |  91.2% |    86.4% |  88.9% |  78.1% |  70.7% |
   | English              |  94.5% |  93.8% |  95.4% |    92.5% |  97.0% |  84.2% |  80.6% |
   | Estonian             |  88.0% |  73.7% |  80.0% |    73.6% |  77.0% |  79.9% |  71.5% |
   | Finnish              |  94.9% |  96.0% |  93.2% |    92.1% |  86.8% |  81.0% |  76.5% |
   | Finnish-FTB          |  94.0% |  91.6% |  93.3% |    91.2% |  89.1% |  81.5% |  76.9% |
   | French               |  95.8% |    -   |    -   |    95.8% |    -   |  82.8% |  78.4% |
   | German               |  90.5% |    -   |    -   |    90.5% |    -   |  78.2% |  72.2% |
   | Gothic               |  95.5% |  95.7% |  88.0% |    86.3% |  93.4% |  76.4% |  68.2% |
   | Greek                |  97.3% |  97.3% |  92.8% |    91.7% |  94.8% |  80.3% |  76.5% |
   | Hebrew               |  94.9% |  94.9% |  91.3% |    90.5% |    -   |  82.6% |  76.8% |
   | Hindi                |  95.8% |  94.8% |  90.2% |    87.7% |  98.0% |  91.7% |  87.5% |
   | Hungarian            |  92.6% |    -   |  89.9% |    88.9% |  86.9% |  77.0% |  70.6% |
   | Indonesian           |  93.5% |    -   |    -   |    93.5% |    -   |  79.9% |  73.3% |
   | Irish                |  91.8% |  90.3% |  79.4% |    76.6% |  87.3% |  74.4% |  66.1% |
   | Italian              |  97.2% |  97.0% |  97.1% |    96.2% |  97.7% |  88.6% |  85.8% |
   | Latin                |  91.2% |  75.8% |  79.3% |    75.6% |  79.9% |  57.1% |  46.7% |
   | Latin-ITT            |  98.8% |  94.0% |  94.6% |    93.8% |  98.3% |  79.9% |  76.4% |
   | Latin-PROIEL         |  96.4% |  96.0% |  88.9% |    88.2% |  95.3% |  75.3% |  68.3% |
   | Norwegian            |  97.2% |    -   |  95.5% |    94.7% |  96.9% |  86.7% |  84.1% |
   | Old Church Slavonic  |  95.3% |  95.1% |  89.1% |    88.2% |  92.9% |  80.6% |  73.4% |
   | Persian              |  97.0% |  96.3% |  96.5% |    96.2% |    -   |  83.8% |  79.4% |
   | Polish               |  95.8% |  84.0% |  84.1% |    83.8% |  92.8% |  86.3% |  79.6% |
   | Portuguese           |  97.6% |  92.3% |  95.3% |    92.0% |  97.8% |  85.8% |  81.9% |
   | Romanian             |  89.0% |  81.0% |  82.3% |    81.0% |  75.3% |  68.6% |  56.9% |
   | Slovenian            |  95.7% |  88.2% |  88.6% |    87.5% |  95.0% |  84.1% |  80.3% |
   | Spanish              |  95.3% |    -   |  95.9% |    93.4% |  96.3% |  84.2% |  80.3% |
   | Swedish              |  95.8% |  93.9% |  94.8% |    93.2% |  95.5% |  81.4% |  77.1% |
   | Tamil                |  85.9% |  80.8% |  84.3% |    80.2% |  88.0% |  67.2% |  58.8% |


Running UDPipe
--------------

Probably the most common usage of UDPipe is to tokenize, tag and parse input
using
  udpipe --tokenize --tag --parse udpipe_model

The input is assumed to be in UTF-8 encoding and can be either already tokenized
and segmented, or it can be a plain text which is tokenized and segmented
automatically.

Any number of files can be specified after the udpipe_model and if no file is
given, input is read from standard input. The output is by default saved to
standard output, but if --outfile=name is used, it is saved to the given file
name. The output file name can contain a {}, which is replaced by a base name of
the processed file (i.e., without directories and an extension).

The full command syntax of running UDPipe is
  udpipe [options] udpipe_model file ...
  Options: --input=[conllu|horizontal|vertical]
           --outfile=output file template
           --output=[conllu|horizontal|vertical]
           --tokenize (perform tokenization)
           --tokenizer=tokenizer options, implies --tokenize
           --tag (perform tagging)
           --tagger=tagger options, implies --tag
           --parse (perform parsing)
           --parser=parser options, implies --parse


Tokenizer
---------

If the --tokenize input is supplied, the input is assumed to be plain text and
is tokenized using model tokenizer. Additional arguments to the tokenizer might
be specified using --tokenizer=data option (which implies --tokenize).


Input Formats
-------------

If the tokenizer is not used, the input format is specified using the --input
option. Currently supported input formats are:
- conllu (default): the CoNLL-U format
  (http://universaldependencies.org/docs/format.html)
- horizontal: each sentence on a separate line, with tokens separated by spaces
- vertical: each token on a separate line, with an empty line denoting end of
  sentence; only the first space-separated word is used as a token, the rest of
  the line is ignored


Tagger
------

If the --tag input is supplied, the input is POS tagged lemmatized using the
model tagger. Additional arguments to the tagger might be specified using
--tagger=data option (which implies --tag).


Dependency Parsing
------------------

If the --parse input is supplied, the input is parsed using the model dependency
parser.  Additional arguments to the parser might be specified using
--parser=data option (which implies --parse).


Output Formats
--------------

The output format is specified using the --output option. Currently supported
output formats are:
- conllu (default): the CoNLL-U format
  (http://universaldependencies.org/docs/format.html)
- horizontal: each sentence on a separate line, with words separated by a
  single space
- vertical: each word on a separate line, with an empty line denoting end of
  sentence


Running the UDPipe REST Server
------------------------------

UDPipe also provides REST server binary udpipe_server. The binary uses
MicroRestD (http://github.com/ufal/microrestd) as a REST server implementation
and provides UDPipe REST API
(http://lindat.mff.cuni.cz/services/udpipe/api-reference.php).

The full command syntax of udpipe_server is
  udpipe_server [options] port (rest_id model_file acknowledgements)*
  Options: --daemon

The udpipe_server can run either in foreground or in background (when --daemon
is used). The specified model files are loaded during start and kept in memory
all the time. This behaviour may change in future to load the models on demand.


Training UDPipe Models
----------------------

Custom UDPipe models can be trained using the following syntax:
  udpipe --train model.output [--heldout=heldout_data] training_file ...

The training data should be in CoNLL-U format
(http://universaldependencies.org/docs/format.html).

By default three model components are trained - a tokenizer, tagger and a
parser.  Any subset of the model components can be trained and a model component
may be copied from an existing model.

The training options are specified for each model component separately using the
--tokenizer, --tagger and --parser option. If a model component should not be
trained, value none should be used (e.g., --tagger=none).

The options are name=value pairs separated by a semicolon. The value can be
either a simple string value (ending by a semicolon), file content specified as
name=file:filename, or an arbitrary string value specified as
name=data:length:value, where the value is exactly length bytes long.


Reusing Components from Existing Models
---------------------------------------

The model components (tagger, parser or tagger) can be reused from existing
models, by specifying from_model=file:filename option.


Random Hyperparameter Search
----------------------------

The default values of hyperparameters is set to the values which were used the
most during UD 1.2 models training, but if you want to reach best performance,
the hyperparameters must be tuned.

Apart from manual grid search, UDPipe can perform a simple random search. You
can perform the random search by repeatedly training UDPipe (preferably in
parallel, most likely on different computers) while specifying different
training run number - some of the hyperparameters (chosen by us; but if you
specify their value on command line, it is not modified) change their value on
different training runs. The pseudorandom sequences of hyperparameters are of
course deterministic.

The training run can be specified by providing run=number option to a model
component. The run number 1 is the default one (with best hyperparameters for
the UD 1.2 models), runs 2 and more randomize the hyperparameters.


Tokenizer
---------

The tokenizer is trained using the SpaceAfter=No features in the CoNLL-U files.
If the feature is not present, a detokenizer can be used to guess the
SpaceAfter=No features according to a supplied plain text.

In order to use the detokenizer, use detokenizer=file:filename_with_plaintext
option. In UD 1.2 models, optimal performance is achieved with very small plain
texts - only 500kB.

The tokenizer recognizes the following options:
- tokenize_url (default true): tokenize URLs and emails using a manually
  implemented recognizer
- epochs (default 100): the number of epochs to train the tokenizer for
- batch_size (default 50): batch size used during tokenizer training
- learning_rate (default 0.005): the learning rate used during tokenizer
  training
- dropout (default 0.1): dropout used during tokenizer training

During random hyperparameter search, batch_size is chosen uniformly from
{50,100} and learning_rate logarithmically from <0.0005, 0.01).


Tagger
------

The tagging is currently performed using MorphoDiTa
(http://ufal.mff.cuni.cz/morphodita). The UDPipe tagger consists of possibly
several MorphoDiTa models, each tagging some of the POS tags and/or lemmas.

By default, only one model is constructed, which generates all available tags
(UPOS, XPOS, Feats and Lemma). However, we found out during the UD 1.2 models
training that performance improves if one model tags the UPOS, XPOS and Feats
tags, while the other is performing lemmatization. Therefore, if you utilize two
MorphoDiTa models, by default the first one generates all tags and the second
one performs lemmatization.

The number of MorphoDiTa models can be specified using models=number parameter.
All other parameters may be either generic for all models
(guesser_suffix_rules=5), or specific for a given model
(guesser_suffix_rules_2=6), including the from_model option (therefore,
MorphoDiTa models can be trained separately and then combined together to one
UDPipe model).

Every model utilizes UPOS for disambiguation and the first model is the one
producing the UPOS tags on output.

The tokenizer recognizes the following options:
- use_lemma (default for the second model and also if there is only one model):
  use the lemma field internally to perform disambiguation; the lemma may be not
  outputted
- provide_lemma (default for the second model and also if there is only one
  model): produce the disambiguated lemma on output
- use_xpostag (default for the first model): use the XPOS tags internally to
  perform disambiguation; it may not be outputted
- provide_xpostag (default for the first model): produce the disambiguated XPOS
  tag on output
- use_feats (default for the first model): use the Feats internally to perform
  disambiguation; it may not be outputted
- provide_feats (default for the first model): produce the disambiguated Feats
  field on output
- guesser_suffix_rules (default 8): number of rules generated for every suffix
- guesser_enrich_dictionary (default 6): number of rules generated for forms
  present in training data (assuming that the analyses from the training data
  may not be all)

During random hyperparameter search, guesser_suffix_rules is chosen uniformly
from {5,6,7,8,9,10,11,12} and guesser_enrich_dictionary is chosen uniformly from
{3,4,5,6,7,8,9,10}.

Note that for very large input training files it may happen that the
morphological dictionary will be too large and the training will end with an
error. If that happens, use smaller values for guesser_suffix_rules and/or
guesser_enrich_dictionary.


Parser
------

The parsing is performed using Parsito (http://ufal.mff.cuni.cz/parsito), which
is a transition-based parser using neural network classifier.

The transition-based systems can be configured by the following options:
- transition_system (default projective): which transition system to use for
  parsing (language dependant, you can choose according to language properties
  or try all and choose the best)
  - projective: projective stack-based arc standard system with shift, left_arc
    and right_arc transitions
  - swap: fully non-projective system which extends projective system by adding
    swap transition
  - link2: partially non-projective system which extends projective system by
    adding left_arc2 and right_arc2 transitions
- transition_oracle (default dynamic/static_lazy_static whichever first is
  applicable): which transition oracle to use for the chosen transition_system:
  - transition_system=projective: available oracles are static and dynamic
    (dynamic usually gives better results, but training time is slower)
  - transition_system=swap: available oracles are static_eager and static_lazy
    (static_lazy almost always gives better results)
  - transition_system=link2: only available oracle is static
- structured_interval (default 8): use search-based oracle in addition to the
  translation_oracle specified. This almost always gives better results, but
  makes training 2-3 times slower. For details, see the paper Straka et al.
  2015: Parsing Universal Dependency Treebanks using Neural Networks and
  Search-Based Oracle

The embeddings used by the parser can be specified as follows:
- embedding_upostag (default 20): the dimension of the UPos embedding used in
  the parser
- embedding_feats (default 20): the dimension of the Feats embedding used in
  the parser
- embedding_xpostag (default 0): the dimension of the XPos embedding used in
  the parser
- embedding_form (default 50): the dimension of the Form embedding used in the
  parser
- embedding_lemma (default 0): the dimension of the Lemma embedding used in the
  parser
- embedding_form_file: pre-trained word embeddings created by word2vec can be
  optionally used; pretraining embeddings even on the UD data itself improves
  accuracy (we use -cbow 0 -size 50 -window 10 -negative 5 -hs 0 -sample 1e-1
  -threads 12 -binary 0 -iter 15 -min-count 2 options to pretrain on UD data)
- embedding_lemma_file: pre-trained lemma embeddings created by word2vec can be
  optionally used;

Note that form embedding could be pretrained directly in UDPipe (and will
probably be pretrained in future UDPipe version).

The neural network training options:
- iterations (default 10): number of training iterations to use
- hidden_layer (default 200): the size of the hidden layer
- batch_size (default 10): batch size used during neural network training
- learning_rate (default 0.02): the learning rate used during neural network
  training
- learning_rate_final (0.001): the final learning rate used during neural
  network training
- l2 (0.5): the L2 regularization used during neural network training

During random hyperparameter search, structured_interval is chosen uniformly
from {0,8,10}, learning_rate is chosen logarithmically from <0.005,0.04) and l2
is chosen uniformly from <0.2,0.6).


Measuring Model Accuracy
------------------------

Measuring custom model accuracy can be performed by running:
  udpipe --accuracy [udpipe_options] udpipe_model file ...

The command syntax is similar to the regular UDPipe operation, only the input
must be always in CoNLL-U format
(http://universaldependencies.org/docs/format.html) and the --input and --output
options are ignored.

If --tokenize(r) option is passed, tokenizer performance is evaluted (using
SpaceAfter=No features of the input file). If --tag(ger) and/or --parse(r)
options are passed, tagger and/or dependency parser performance is evaluated,
respectively.


UDPipe API Reference
====================

The UDPipe API is defined in header udpipe.h and resides in ufal::udpipe
namespace. The API allows only using existing models, for custom model creation
you have to use the train_parser binary.

The strings used in the UDPipe API are always UTF-8 encoded (except from file
paths, whose encoding is system dependent).


UDPipe Versioning
-----------------

UDPipe is versioned using Semantic Versioning (http://semver.org/). Therefore, a
version consists of three numbers major.minor.patch, optionally followed by a
hyphen and pre-release version info, with the following semantics:

- Stable versions have no pre-release version info, development have non-empty
  pre-release version info.
- Two versions with the same major.minor have the same API with the same
  behaviour, apart from bugs. Therefore, if only patch is increased, the new
  version is only a bug-fix release.
- If two versions v and u have the same major, but minor(v) is greater than
  minor(u), version v contains only additions to the API. In other words, the
  API of u is all present in v with the same behaviour (once again apart from
  bugs). It is therefore safe to upgrade to a newer UDPipe version with the same
  major.
- If two versions differ in major, their API may differ in any way.

Models created by UDPipe have the same behaviour in all UDPipe versions with
same major, apart from obvious bugfixes. On the other hand, models created from
the same data by different major.minor UDPipe versions may have different
behaviour.


Struct string_piece
-------------------

  struct string_piece {
    const char* str;
    size_t len;

    string_piece();
    string_piece(const char* str);
    string_piece(const char* str, size_t len);
    string_piece(const std::string& str);
  }

The string_piece is used for efficient string passing. The string referenced in
string_piece is not owned by it, so users have to make sure the referenced
string exists as long as the string_piece.


Class word
----------

  class word {
   public:
    int id;         // 0 is root, >0 is sentence word, <0 is undefined
    string form;    // form
    string lemma;   // lemma
    string upostag; // universal part-of-speech tag
    string xpostag; // language-specific part-of-speech tag
    string feats;   // list of morphological features
    int head;       // head, 0 is root, <0 is undefined
    string deprel;  // dependency relation to the head
    string deps;    // secondary dependencies
    string misc;    // miscellaneous information

    vector<int> children;

    word(int id = -1, string_piece form = string_piece());
  };

The word class represents a sentence word. The word fields correspond to CoNLL-U
fields (http://universaldependencies.org/docs/format.html), with the children
field representing the opposite direction of head links.


Class multiword_token
---------------------

  class multiword_token {
   public:
    int id_first, id_last;
    string form;
    string misc;

    multiword_token(int id_first = -1, int id_last = -1, string_piece form = string_piece(), string_piece misc = string_piece());
  };


Class sentence
--------------

  class sentence {
   public:
    sentence();

    vector<word> words;
    vector<multiword_token> multiword_tokens;
    vector<string> comments;
    static const string root_form;

    bool empty();
    void clear();
    word& add_word(string_piece form = string_piece());
    void set_head(int id, int head, const string& deprel);
    void unlink_all_words();
  };


Class input_format
------------------

  class input_format {
   public:
    virtual ~input_format() {}

    virtual bool read_block(istream& is, string& block) const = 0;
    virtual void set_text(string_piece text, bool make_copy = false) = 0;
    virtual bool next_sentence(sentence& s, string& error) = 0;

    // Static factory methods
    static input_format* new_input_format(const string& name);
    static input_format* new_conllu_input_format();
    static input_format* new_horizontal_input_format();
    static input_format* new_vertical_input_format();
  };


Class output_format
-------------------

  class output_format {
   public:
    virtual ~output_format() {}

    virtual void write_sentence(const sentence& s, ostream& os) const = 0;

    // Static factory methods
    static output_format* new_output_format(const string& name);
    static output_format* new_conllu_output_format();
    static output_format* new_horizontal_output_format();
    static output_format* new_vertical_output_format();
  };


Class model
-----------

  class model {
   public:
    virtual ~model() {}

    static model* load(const char* fname);
    static model* load(istream& is);

    virtual input_format* new_tokenizer(const string& options) const = 0;
    virtual bool tag(sentence& s, const string& options, string& error) const = 0;
    virtual bool parse(sentence& s, const string& options, string& error) const = 0;

    static const string DEFAULT;
  };


Class pipeline
--------------

  class pipeline {
   public:
    pipeline(const model* m, const string& input, const string& tagger, const string& parser, const string& output);

    void set_model(const model* m);
    void set_input(const string& input);
    void set_tagger(const string& tagger);
    void set_parser(const string& parser);
    void set_output(const string& output);

    bool process(istream& is, ostream& os, string& error) const;

    static const string DEFAULT;
    static const string NONE;
  };


Class trainer
-------------

  class trainer {
   public:
    static bool train(const string& method, const vector<sentence>& train, const vector<sentence>& heldout,
                      const string& tokenizer, const string& tagger, const string& parser,
                      ostream& os, string& error);

    static const string DEFAULT;
    static const string NONE;
  };


Class evaluator
---------------

  class evaluator {
   public:
    evaluator(const model* m, const string& tokenizer, const string& tagger, const string& parser);

    void set_model(const model* m);
    void set_tokenizer(const string& tokenizer);
    void set_tagger(const string& tagger);
    void set_parser(const string& parser);

    bool evaluate(istream& is, ostream& os, string& error) const;

    static const string DEFAULT;
    static const string NONE;
  };


Class version
-------------

  class version {
   public:
    unsigned major;
    unsigned minor;
    unsigned patch;
    string prerelease;

    static version current();
  };

The version class represents UDPipe version. See UDPipe Versioning for more
information.


version::current
----------------

  static version current();

Returns current UDPipe version.


C++ Bindings API
----------------

Bindings for other languages than C++ are created using SWIG from the C++
bindings API, which is a slightly modified version of the native C++ API. Main
changes are replacement of string_piece type by native strings and removal of
methods using istream. Here is the C++ bindings API declaration:


Helper Structures
-----------------

  typedef vector<int> Children;

  typedef vector<string> Comments;

  class ProcessingError {
  public:
    bool occurred();
    string message;
  };

  class Word {
   public:
    int id;         // 0 is root, >0 is sentence word, <0 is undefined
    string form;    // form
    string lemma;   // lemma
    string upostag; // universal part-of-speech tag
    string xpostag; // language-specific part-of-speech tag
    string feats;   // list of morphological features
    int head;       // head, 0 is root, <0 is undefined
    string deprel;  // dependency relation to the head
    string deps;    // secondary dependencies
    string misc;    // miscellaneous information

    Children children;

    Word(int id = -1, const string& form = string());
  };
  typedef vector<Word> Words;

  class MultiwordToken {
   public:
    int idFirst, idLast;
    string form;
    string misc;

    MultiwordToken(int id_first = -1, int id_last = -1, const string& form = string(), const string& misc = string());
  };
  typedef vector<MultiwordToken> MultiwordTokens;

  class Sentence {
   public:
    Sentence();

    Words words;
    MultiwordTokens multiwordTokens;
    Comments comments
    static const string rootForm;

    bool empty();
    void clear();
    virtual Word& addWord(const char* form);
    void setHead(int id, int head, const string& deprel);
    void unlinkAllWords();
  };
  typedef vector<Sentence> Sentences;


Main Classes
------------

  class InputFormat {
   public:
    virtual void setText(const char* text);
    virtual bool nextSentence(Sentence& s, ProcessingError* error = nullptr);

    static InputFormat* newInputFormat(const string& name);
    static InputFormat* newConlluInputFormat();
    static InputFormat* newHorizontalInputFormat();
    static InputFormat* newVerticalInputFormat();
  };

  class OutputFormat {
   public:
    virtual string writeSentence(const Sentence& s) const;

    static OutputFormat* newOutputFormat(const string& name);
    static OutputFormat* newConlluOutputFormat();
    static OutputFormat* newHorizontalOutputFormat();
    static OutputFormat* newVerticalOutputFormat();
  };

  class Model {
   public:
    static Model* load(const char* fname);

    virtual InputFormat* newTokenizer(const string& options) const;
    virtual bool tag(Sentence& s, const string& options, ProcessingError* error = nullptr) const;
    virtual bool parse(Sentence& s, const string& options, ProcessingError* error) const;

    static const string DEFAULT;
  };

  class Pipeline {
   public:
    Pipeline(const Model* m, const string& input, const string& tagger, const string& parser, const string& output);

    void setModel(const Model* m);
    void setInput(const string& input);
    void setTagger(const string& tagger);
    void setParser(const string& parser);
    void setOutput(const string& output);

    string process(const string& data, ProcessingError* error = nullptr) const;

    static const string DEFAULT;
    static const string NONE;
  };

  class Trainer {
   public:

    static string train(const string& method, const Sentences& train, const Sentences& heldout,
                        const string& tokenizer, const string& tagger, const string& parser,
                        ProcessingError* error = nullptr);

    static const string DEFAULT;
    static const string NONE;
  };

  class Evaluator {
   public:
    Evaluator(const Model* m, const string& tokenizer, const string& tagger, const string& parser);

    void setModel(const Model* m);
    void setTokenizer(const string& tokenizer);
    void setTagger(const string& tagger);
    void setParser(const string& parser);

    string evaluate(const string& data, ProcessingError* error = nullptr) const;

    static const string DEFAULT;
    static const string NONE;
  };

  class Version {
   public:
    unsigned major;
    unsigned minor;
    unsigned patch;
    string prerelease;

    // Returns current version.
    static version current();
  };


C# Bindings
-----------

UDPipe library bindings is available in the Ufal.UDPipe namespace.

The bindings is a straightforward conversion of the C++ bindings API. The
bindings requires native C++ library libudpipe_csharp (called udpipe_csharp on
Windows).


Java Bindings
-------------

UDPipe library bindings is available in the cz.cuni.mff.ufal.udpipe package.

The bindings is a straightforward conversion of the C++ bindings API. Vectors do
not have native Java interface, see cz.cuni.mff.ufal.udpipe.Words class for
reference. Also, class members are accessible and modifiable using using
getField and setField wrappers.

The bindings require native C++ library libudpipe_java (called udpipe_java on
Windows). If the library is found in the current directory, it is used,
otherwise standard library search process is used.


Perl Bindings
-------------

UDPipe library bindings is available in the Ufal::UDPipe
(http://search.cpan.org/~straka/Ufal-UDPipe/) package. The classes can be
imported into the current namespace using the :all export tag.

The bindings is a straightforward conversion of the C++ bindings API. Vectors do
not have native Perl interface, see Ufal::UDPipe::Words for reference. Static
methods and enumerations are available only through the module, not through
object instance.


Python Bindings
---------------

UDPipe library bindings is available in the ufal.udpipe
(http://pypi.python.org/pypi/ufal.udpipe) module.

The bindings is a straightforward conversion of the C++ bindings API. In Python
2, strings can be both unicode and UTF-8 encoded str, and the library always
produces unicode. In Python 3, strings must be only str.


Contact
=======

Authors:
- Milan Straka (http://ufal.mff.cuni.cz/milan-straka), straka@ufal.mff.cuni.cz

UDPipe website (http://ufal.mff.cuni.cz/udpipe).

UDPipe LINDAT/CLARIN entry (http://hdl.handle.net/11234/1-1702).


Acknowledgements
================

This work has been using language resources developed and/or stored and/or
distributed by the LINDAT/CLARIN project of the Ministry of Education of the
Czech Republic (project LM2010013).

Acknowledgements for individual language models are listed in UDPipe User's
Manual.


Publications
------------

- (Straka et al. 2016) Straka Milan, Hajič Jan, Straková Jana. UDPipe:
  Trainable Pipeline for Processing CoNLL-U Files Performing Tokenization,
  Morphological Analysis, POS Tagging and Parsing. In Proceedings of the Tenth
  International Conference on Language Resources and Evaluation (LREC 2016),
  Portorož, Slovenia, May 2016.


Bibtex for Referencing
----------------------

  @InProceedings{udpipe:2016,
    author    = {Straka, Milan and Haji\v{c}, Jan and Strakov\'{a}},
    title     = {{UDPipe:} Trainable Pipeline for Processing {CoNLL-U} Files Performing Tokenization, Morphological Analysis, POS Tagging and Parsing},
    booktitle = {Proceedings of the Tenth International Conference on Language Resources and Evaluation (LREC'16),
    year      = {2016},
    month     = {May},
    date      = {23-28},
    location  = {Portorož, Slovenia},
    publisher = {European Language Resources Association (ELRA)},
    address   = {Paris, France},
    isbn      = {978-2-9517408-9-1}
  }


Persistent Identifier
---------------------

If you prefer to reference UDPipe by a persistent identifier (PID), you can use
http://hdl.handle.net/11234/1-1702.
